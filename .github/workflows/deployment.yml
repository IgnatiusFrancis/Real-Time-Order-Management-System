name: Order Management CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  lint-and-security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: Install Dependencies
        run: npm ci

      - name: Run Linter
        run: npm run lint

      - name: Security Audit
        run: npm audit --audit-level=critical

  test:
    runs-on: ubuntu-latest
    needs: lint-and-security
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U test_user -d test_db"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 10

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install Dependencies
        run: npm ci

      - name: Wait for Database to be Ready
        run: |
          echo "Waiting for PostgreSQL to be ready..."
          for i in {1..20}; do
            pg_isready -h localhost -U test_user && break
            echo "Database not ready yet... ($i/20)"
            sleep 2
          done

      - name: Apply Prisma Migrations
        env:
          DATABASE_URL: 'postgresql://test_user:test_password@localhost:5432/test_db'
        run: npx prisma migrate deploy

      - name: Run Unit & Integration Tests
        run: npm run test

  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up SSH
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key
          chmod 600 private_key

      - name: Fake Deployment (For Learning)
        run: echo "ðŸš€ Deploying application..."

  rollback:
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Rollback to Last Stable Release
        run: echo "ðŸ”„ Rolling back to last stable version..."

  notify-on-failure:
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Send Slack Alert
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": "ðŸš¨ *Build or Deployment Failed!* Job: ${{ github.job }} | Repo: ${{ github.repository }} | Commit: ${{ github.sha }} | Check GitHub Actions logs."
          }' ${{ secrets.SLACK_WEBHOOK_URL }}
