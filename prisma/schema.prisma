generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum OrderStatus {
  REVIEW
  PROCESSING
  COMPLETED
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders   Order[]   @relation("UserOrders")
  messages Message[] @relation("UserMessages")

  @@map("users")
}

model Order {
  id             String      @id @default(uuid())
  description    String
  specifications Json
  quantity       Int
  status         OrderStatus @default(REVIEW)
  metadata       Json?       @default("{}")
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  userId   String
  user     User      @relation("UserOrders", fields: [userId], references: [id], onDelete: Cascade)
  chatRoom ChatRoom?

  @@index([userId, status])
  @@map("orders")
}

model ChatRoom {
  id        String   @id @default(uuid())
  isClosed  Boolean  @default(false)
  summary   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderId  String    @unique
  order    Order     @relation(fields: [orderId], references: [id], onDelete: Cascade)
  messages Message[] @relation("ChatRoomMessages")

  @@index([isClosed])
  @@map("chat_rooms")
}

model Message {
  id        String   @id @default(uuid())
  content   String
  createdAt DateTime @default(now())

  sender   User   @relation("UserMessages", fields: [senderId], references: [id], onDelete: Cascade)
  senderId String

  chatRoomId String
  chatRoom   ChatRoom @relation("ChatRoomMessages", fields: [chatRoomId], references: [id], onDelete: Cascade)

  @@index([chatRoomId, createdAt])
  @@index([senderId, createdAt])
  @@map("messages")
}
